// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTcp_drop returns the embedded CollectionSpec for tcp_drop.
func loadTcp_drop() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Tcp_dropBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcp_drop: %w", err)
	}

	return spec, err
}

// loadTcp_dropObjects loads tcp_drop and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tcp_dropObjects
//	*tcp_dropPrograms
//	*tcp_dropMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcp_dropObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcp_drop()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcp_dropSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_dropSpecs struct {
	tcp_dropProgramSpecs
	tcp_dropMapSpecs
}

// tcp_dropSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_dropProgramSpecs struct {
	XdpTcpDrop *ebpf.ProgramSpec `ebpf:"xdp_tcp_drop"`
}

// tcp_dropMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_dropMapSpecs struct {
	GlobalData *ebpf.MapSpec `ebpf:"global_data"`
}

// tcp_dropObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcp_dropObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_dropObjects struct {
	tcp_dropPrograms
	tcp_dropMaps
}

func (o *tcp_dropObjects) Close() error {
	return _Tcp_dropClose(
		&o.tcp_dropPrograms,
		&o.tcp_dropMaps,
	)
}

// tcp_dropMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcp_dropObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_dropMaps struct {
	GlobalData *ebpf.Map `ebpf:"global_data"`
}

func (m *tcp_dropMaps) Close() error {
	return _Tcp_dropClose(
		m.GlobalData,
	)
}

// tcp_dropPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcp_dropObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_dropPrograms struct {
	XdpTcpDrop *ebpf.Program `ebpf:"xdp_tcp_drop"`
}

func (p *tcp_dropPrograms) Close() error {
	return _Tcp_dropClose(
		p.XdpTcpDrop,
	)
}

func _Tcp_dropClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcp_drop_bpfel.o
var _Tcp_dropBytes []byte
